给你一个整数数组A，只有可以将其划分为三个和相等的非空部分时才返回true，否则返回 false。


形式上，如果可以找出
索引i+1 < j且满足(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])
就可以将数组三等分。



class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& A) {
        int n=A.size();
        int sum=accumulate(A.begin(),A.end(),0);
        int target=sum/3;
        int cur=0,i=0;
        while(i<n){
            cur+=A[i];
            if(cur==target){
            break;}
            ++i;
        }
        int j=i+1;
        while(j+1<n){
            cur+=A[j];
            if(cur==target*2){
                return true;
            }
            ++j;
        }
        return false;
    }
};

执行用时 :48 ms, 在所有 C++ 提交中击败了88.32%的用户
内存消耗 :31.8 MB, 在所有 C++ 提交中击败了5.16%的用户
