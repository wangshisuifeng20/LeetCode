判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。


示例 1:

输入: 121
输出: true

示例?2:

输入: -121
输出: false

解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。
因此它不是一个回文数。

示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。
因此它不是一个回文数。


进阶:

你能不将整数转为字符串来解决这个问题吗？



class Solution {
public:
    bool isPalindrome(int x) {
        int z = 0;
        if(x<0 || x!=0&&x%10==0){return false;}
        while(x>z){
            z = z*10 + x%10;
            x = x/10;
        }
        return x == z/10 || x == z;
    }
};

解法:
如果输入的值小于0或者输入个位数为0但不为0的数，
则返回值为false
再将输入的数为偶数，后半部分与前半部分比较看是否相等
若输入的数为奇数，则只需除最中间的那位数的其他位数相等
相等则返回true，不相等则返回false

执行用时 :16 ms, 在所有 C++ 提交中击败了70.57%的用户
内存消耗 :7.3 MB, 在所有 C++ 提交中击败了100.00%的用户